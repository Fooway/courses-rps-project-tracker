"use strict";
var core_1 = require("@angular/core");
var faker = require("faker");
var _ = require("lodash");
var fileSystemModule = require("file-system");
var constModule = require("../shared/constants");
var static_data_1 = require("../shared/static-data");
var MockDataService = (function () {
    function MockDataService() {
    }
    MockDataService.prototype.getUserAvatars = function (path) {
        var avatarList = [];
        var currentAppFolder = fileSystemModule.knownFolders.currentApp();
        var menAvatarsFile = currentAppFolder.getFile(path);
        var fileText = menAvatarsFile.readTextSync();
        var lines = fileText.split('\n');
        for (var i = 0; i < lines.length; i++) {
            avatarList.push(lines[i]);
        }
        return avatarList;
    };
    MockDataService.prototype.generateUser = function (avatarsMen) {
        var genderBool = faker.random.boolean();
        var genderInt = parseInt(genderBool + '');
        var firstName = faker.name.firstName(genderInt);
        var lastName = faker.name.lastName(genderInt);
        var avatar = _.sample(avatarsMen);
        var user = {
            id: faker.random.uuid(),
            fullName: firstName + ' ' + lastName,
            avatar: avatar
        };
        return user;
    };
    MockDataService.prototype.getMeUser = function () {
        var avatarMe = this.getUserAvatars('images/avatars/base64/me.txt')[0];
        var userMe = {
            id: faker.random.uuid(),
            fullName: 'Alex Ziskind',
            avatar: avatarMe
        };
        return userMe;
    };
    MockDataService.prototype.generateUsers = function () {
        var _this = this;
        var avatarsLi = this.getUserAvatars('images/avatars/base64/base64.txt');
        var users = _.times(constModule.NUM_USERS, function () {
            return _this.generateUser(avatarsLi);
        });
        var userMe = this.getMeUser();
        users.unshift(userMe);
        return users;
    };
    MockDataService.prototype.generatePTItem = function (users) {
        var typeStr = static_data_1.ItemTypeEnum[_.random(1, 4)];
        var priorityStr = static_data_1.PriorityEnum[_.random(1, 4)];
        var statusStr = static_data_1.StatusEnum[_.random(1, 4)];
        var ptItem = {
            id: faker.random.uuid(),
            title: this.toTitleCase(faker.lorem.words()),
            dateCreated: faker.date.past(1),
            dateModified: faker.date.past(1),
            type: static_data_1.ItemTypeEnum[typeStr],
            estimate: _.random(1, 24),
            priority: static_data_1.PriorityEnum[priorityStr],
            status: static_data_1.StatusEnum[statusStr],
            assignee: _.sample(users),
            tasks: this.generateTasks(),
            comments: this.generateComments(users)
        };
        return ptItem;
    };
    MockDataService.prototype.generateTasks = function () {
        var _this = this;
        var numTasks = _.random(5, 20);
        var tasks = _.times(numTasks, function () {
            return _this.generateTask();
        });
        return tasks;
    };
    MockDataService.prototype.generateTask = function () {
        var task = {
            id: faker.random.uuid(),
            title: this.toTitleCase(faker.lorem.words()),
            dateCreated: faker.date.past(1),
            dateModified: faker.date.past(1),
            completed: faker.random.boolean()
        };
        return task;
    };
    MockDataService.prototype.generateComments = function (users) {
        var _this = this;
        var numComments = _.random(0, 5);
        var comments = _.times(numComments, function () {
            return _this.generateComment(users);
        });
        return comments;
    };
    MockDataService.prototype.generateComment = function (users) {
        var comment = {
            id: faker.random.uuid(),
            title: this.toTitleCase(faker.lorem.sentence(20, 40)),
            dateCreated: faker.date.past(1),
            dateModified: faker.date.past(1),
            user: _.sample(users)
        };
        return comment;
    };
    MockDataService.prototype.generatePTItems = function (users) {
        var _this = this;
        var items = _.times(constModule.NUM_PT_ITEMS, function () {
            return _this.generatePTItem(users);
        });
        return items;
    };
    MockDataService.prototype.toTitleCase = function (str) {
        return str.replace(/\w\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });
    };
    return MockDataService;
}());
MockDataService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], MockDataService);
exports.MockDataService = MockDataService;
//# sourceMappingURL=data:application/json;base64,